<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ExcelEntityMapper</name>
    </assembly>
    <members>
        <member name="T:ExcelEntityMapper.ExcelFormat">
            <summary>
            
            </summary>
        </member>
        <member name="F:ExcelEntityMapper.ExcelFormat.BIFF">
            <summary>
            An old workbook format.
            </summary>
        </member>
        <member name="F:ExcelEntityMapper.ExcelFormat.XML">
            <summary>
            A new workbook format.
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.Exceptions.NotAvailableWorkSheetException">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.Exceptions.WorkBookException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.WorkBookException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.WorkBookException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.NotAvailableWorkSheetException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.NotAvailableWorkSheetException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="sheetName"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.NotAvailableWorkSheetException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.NotAvailableWorkSheetException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="sheetName"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:ExcelEntityMapper.Exceptions.NotAvailableWorkSheetException.SheetName">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.Exceptions.SheetParameterException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.SheetParameterException.#ctor(System.String,System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.SheetParameterException.#ctor(System.String,System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="parameter"></param>
            <param name="innerException"></param>
        </member>
        <member name="P:ExcelEntityMapper.Exceptions.SheetParameterException.Parameter">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.Exceptions.UnReadableSheetException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.UnReadableSheetException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.UnReadableSheetException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:ExcelEntityMapper.Exceptions.UnReadableWorkbookException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.UnReadableWorkbookException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.UnReadableWorkbookException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:ExcelEntityMapper.Exceptions.UnWriteableSheetException">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.UnWriteableSheetException.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:ExcelEntityMapper.Exceptions.UnWriteableSheetException.#ctor(System.String,System.Exception)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="T:ExcelEntityMapper.Impl.BIFF.XSheetFilteredMapper`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:ExcelEntityMapper.Impl.SheetMapper`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:ExcelEntityMapper.Impl.SheetBase">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.IXLSheet">
            <summary>
            Defines a default members for standars worksheets.
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.IXLSheet.SheetName">
            <summary>
            The sheetname to use for reading / writting instances.
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.IXLSheet.IndexKeyColumn">
            <summary>
            Rappresents the index key column wich be used for mapping a valid row.
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.IXLSheet.LastColumn">
            <summary>
            Rappresents the last column mapped.
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.IXLSheet.HasHeader">
            <summary>
            Indicates if exists a header.
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Impl.SheetBase.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.SheetBase.#ctor(System.Int32,System.Boolean)">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="zeroBase"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.SheetBase.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="hasHeader"></param>
            <param name="zeroBase"></param>
        </member>
        <member name="P:ExcelEntityMapper.Impl.SheetBase.SheetName">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.SheetBase.IndexKeyColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.SheetBase.LastColumn">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.SheetBase.HasHeader">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.SheetBase.ZeroBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.SheetBase.Offset">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.IXLSheetMapper`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="P:ExcelEntityMapper.IXLSheetMapper`1.PropertyMappers">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Impl.SheetMapper`1.#ctor(System.Int32,System.Boolean,System.Boolean,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="hasHeader"></param>
            <param name="zeroBase"></param>
            <param name="propertyMappers"></param>
        </member>
        <member name="P:ExcelEntityMapper.Impl.SheetMapper`1.PropertyMappers">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.IXLSheetWorker`1">
            <summary>
            Defines a methods for reading /writting worksheets, and a customizing property mappers.
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:ExcelEntityMapper.IXLSheetReader`1">
            <summary>
            Defines a set of methods for reading custom objects into standard worksheets.
            </summary>
            <typeparam name="TSource">The source type which be used for transforming worksheet rows.</typeparam>
        </member>
        <member name="M:ExcelEntityMapper.IXLSheetReader`1.ReadObjects(System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            Reads all worksheet rows and transforms into objects.
            </summary>
            <param name="buffer">A buffer which will be contain all intances read from worksheet.</param>
            <returns>Returns the row number read from the current worksheet.</returns>
        </member>
        <member name="M:ExcelEntityMapper.IXLSheetReader`1.ReadObjects(System.String,System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            Reads all worksheet rows and transforms into objects.
            </summary>
            <param name="sheetName">The sheetname to read from the current workbook.</param>
            <param name="buffer">A buffer which will be contain all intances read from worksheet.</param>
            <returns>Returns the row number read from the current worksheet.</returns>
        </member>
        <member name="T:ExcelEntityMapper.IXLSheetWriter`1">
            <summary>
            Defines a set of methods for writing custom objects into standard worksheets.
            </summary>
            <typeparam name="TSource">The source type which be used for transforming worksheet rows.</typeparam>
        </member>
        <member name="M:ExcelEntityMapper.IXLSheetWriter`1.WriteObjects(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes all objects into current worksheet rows.
            </summary>
            <param name="instances">Objects which be written into current worksheet rows.</param>
            <returns>A number of objects written into the current worksheet.</returns>
        </member>
        <member name="M:ExcelEntityMapper.IXLSheetWriter`1.WriteObjects(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Writes all objects into current worksheet rows.
            </summary>
            <param name="sheetName">The sheetname to find for writing the current instances into workbook.</param>
            <param name="instances">Objects which be written into current worksheet rows.</param>
            <returns>A number of objects written into the current worksheet.</returns>
        </member>
        <member name="M:ExcelEntityMapper.IXLSheetWorker`1.InjectWorkBook(ExcelEntityMapper.IXLWorkBook)">
            <summary>
            
            </summary>
            <param name="workbook"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="propertyMappers"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.#ctor(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="hasHeader"></param>
            <param name="propertyMappers"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.WriteHeader(System.Int32,NPOI.SS.UserModel.ISheet)">
            <summary>
            
            </summary>
            <param name="rowBase"></param>
            <param name="sheet"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.InjectWorkBook(ExcelEntityMapper.IXLWorkBook)">
            <summary>
            
            </summary>
            <param name="workbook"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.ReadObjects(System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.ReadObjects(System.String,System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.ReadInstance(NPOI.SS.UserModel.IRow)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.WriteObjects(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.WriteObjects(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.WriteInstance(NPOI.SS.UserModel.IRow,`0)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.GetWorkSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetname"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.GetFirstRow(NPOI.SS.UserModel.ISheet)">
            <summary>
            
            </summary>
            <param name="workSheet"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetMapper`1.GetLastRow(NPOI.SS.UserModel.ISheet)">
            <summary>
            
            </summary>
            <param name="workSheet"></param>
            <returns></returns>
        </member>
        <member name="T:ExcelEntityMapper.IXLSheetFiltered`1">
            <summary>
            Defines methods for reading /writting, filtering worksheets rows, through customizing property mappers.
            </summary>
            <typeparam name="TSource">The source type which be used for transforming worksheet rows.</typeparam>
        </member>
        <member name="M:ExcelEntityMapper.IXLSheetFiltered`1.ReadFilteredObjects(System.Collections.Generic.IDictionary{System.Int32,`0},System.Func{`0,System.Boolean})">
            <summary>
            Filter the current worksheet rows by the given lambda expression.
            </summary>
            <param name="buffer">A buffer which will be contain all intances read from worksheet.</param>
            <param name="function">A lambda expression for filtering instances read from the current worksheet.</param>
            <returns>Returns the row number read from the current worksheet.</returns>
        </member>
        <member name="M:ExcelEntityMapper.IXLSheetFiltered`1.ReadFilteredObjects(System.String,System.Collections.Generic.IDictionary{System.Int32,`0},System.Func{`0,System.Boolean})">
            <summary>
            Filter the current worksheet rows by the given lambda expression.
            </summary>
            <param name="sheetName">The sheetname to read from the current workbook.</param>
            <param name="buffer">A buffer which will be contain all intances read from worksheet.</param>
            <param name="function">A lambda expression for filtering instances read from the current worksheet.</param>
            <returns>Returns the row number read from the current worksheet.</returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetFilteredMapper`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetFilteredMapper`1.#ctor(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="hasHeader"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetFilteredMapper`1.ReadFilteredObjects(System.Collections.Generic.IDictionary{System.Int32,`0},System.Func{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XSheetFilteredMapper`1.ReadFilteredObjects(System.String,System.Collections.Generic.IDictionary{System.Int32,`0},System.Func{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <param name="buffer"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="T:ExcelEntityMapper.Impl.BIFF.XWorkBook">
            <summary>
            An object class which manage a standard workbook of different formats.
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.IXLWorkBook">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.IXLWorkBook.ExistsWorkSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.IXLWorkBook.GetSheetNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.IXLWorkBook.AddSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
        </member>
        <member name="M:ExcelEntityMapper.IXLWorkBook.RemoveSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.IXLWorkBook.Save">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.#ctor">
            <summary>
            Instance a empty XWorkBook.
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.#ctor(System.IO.Stream)">
            <summary>
            Intance a new WorkBook from the stream input
            </summary>
            <param name="inputStream">a stream which contains the file to read.</param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.ExistsWorkSheet(System.String)">
            <summary>
            Verify if It exists a worksheet with the given name.
            </summary>
            <param name="sheetName">the worksheet sheetname to find.</param>
            <returns>return true if it exists the worksheet.</returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.GetSheetNames">
            <summary>
            get all sheet names present into the calling workbook.
            </summary>
            <returns>return all sheet names.</returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.AddSheet(System.String)">
            <summary>
            Try to add a worksheet with the given name.
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.RemoveSheet(System.String)">
            <summary>
            removes a worksheet which matches with the given sheet name.
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.BIFF.XWorkBook.Save">
            <summary>
            Saves the calling WorkBook into stream. 
            </summary>
            <returns>return a stream wich contains the calling workbook.</returns>
        </member>
        <member name="P:ExcelEntityMapper.Impl.BIFF.XWorkBook.Workbook">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.Impl.PropertyMapper`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:ExcelEntityMapper.IXLPropertyMapper`1">
            <summary>
            Defines a set of properties for customizing property mappers.
            </summary>
            <typeparam name="TSource">Type of instance which property mapper is used.</typeparam>
        </member>
        <member name="P:ExcelEntityMapper.IXLPropertyMapper`1.ColumnIndex">
            <summary>
            Indicates the column index for map property typed class.
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.IXLPropertyMapper`1.ColumnHeader">
            <summary>
            Rappresents the default header name for this mapper.
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.IXLPropertyMapper`1.ToPropertyFormat">
            <summary>
            The action which serves for setting the property instance.
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.IXLPropertyMapper`1.ToExcelFormat">
            <summary>
            A function which serves for transform cell value into property type value.
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Impl.PropertyMapper`1.#ctor(System.Int32,System.Action{`0,System.String},System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="toPropertyFormat"></param>
            <param name="toExcelFormat"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.PropertyMapper`1.#ctor(System.Int32,System.String,System.Action{`0,System.String},System.Linq.Expressions.Expression{System.Func{`0,System.String}})">
            <summary>
            
            </summary>
            <param name="column"></param>
            <param name="columnHeader"></param>
            <param name="toPropertyFormat"></param>
            <param name="toExcelFormat"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.PropertyMapper`1.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.PropertyMapper`1.GetHashCode">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.PropertyMapper`1.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:ExcelEntityMapper.Impl.PropertyMapper`1.ColumnIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.PropertyMapper`1.ColumnHeader">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.PropertyMapper`1.ToPropertyFormat">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.PropertyMapper`1.ToExcelFormat">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.Impl.Xml.XLSheetFilteredMapper`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="T:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="propertyMappers"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.#ctor(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="hasHeader"></param>
            <param name="propertyMappers"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.ChangeBackGround(System.Int32,ClosedXML.Excel.XLColor)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="color"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.WriteHeader(System.Int32,ClosedXML.Excel.IXLWorksheet)">
            <summary>
            
            </summary>
            <param name="rowBase"></param>
            <param name="sheet"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.InjectWorkBook(ExcelEntityMapper.IXLWorkBook)">
            <summary>
            
            </summary>
            <param name="workbook"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.ReadObjects(System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.ReadObjects(System.String,System.Collections.Generic.IDictionary{System.Int32,`0})">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <param name="buffer"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.ReadInstance(ClosedXML.Excel.IXLRow)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.WriteObjects(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.WriteObjects(System.String,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <param name="instances"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.WriteInstance(ClosedXML.Excel.IXLRow,`0)">
            <summary>
            
            </summary>
            <param name="row"></param>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.GetWorkSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetname"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.GetFirstRow(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            
            </summary>
            <param name="workSheet"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetMapper`1.GetLastRow(ClosedXML.Excel.IXLWorksheet)">
            <summary>
            
            </summary>
            <param name="workSheet"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetFilteredMapper`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetFilteredMapper`1.#ctor(System.Int32,System.Boolean,System.Collections.Generic.IEnumerable{ExcelEntityMapper.IXLPropertyMapper{`0}})">
            <summary>
            
            </summary>
            <param name="indexkeyColumn"></param>
            <param name="hasHeader"></param>
            <param name="parameters"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetFilteredMapper`1.ReadFilteredObjects(System.Collections.Generic.IDictionary{System.Int32,`0},System.Func{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLSheetFilteredMapper`1.ReadFilteredObjects(System.String,System.Collections.Generic.IDictionary{System.Int32,`0},System.Func{`0,System.Boolean})">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <param name="buffer"></param>
            <param name="function"></param>
            <returns></returns>
        </member>
        <member name="T:ExcelEntityMapper.Impl.Xml.XLWorkBook">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.#ctor(System.Byte[])">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.#ctor(System.IO.Stream)">
            <summary>
            
            </summary>
            <param name="inputStream"></param>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.ExistsWorkSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.GetSheetNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.AddSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.RemoveSheet(System.String)">
            <summary>
            
            </summary>
            <param name="sheetName"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.Impl.Xml.XLWorkBook.Save">
            <summary>
            
            </summary>
        </member>
        <member name="P:ExcelEntityMapper.Impl.Xml.XLWorkBook.Workbook">
            <summary>
            
            </summary>
        </member>
        <member name="T:ExcelEntityMapper.SourceHelper">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.SourceHelper.CreateInstance``1">
            <summary>
            
            </summary>
            <typeparam name="TSource"></typeparam>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.SourceHelper.GetMemberInfo(System.Linq.Expressions.Expression)">
            <summary>
            
            </summary>
            <param name="expr"></param>
            <returns></returns>
        </member>
        <member name="T:ExcelEntityMapper.XLEntityHelper">
            <summary>
            A static class which helps for converting values from / to property types into excel values and viceversa.
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.IsDateTime(System.Type)">
            <summary>
            Indicates if the argument is considered an Datetime type
            </summary>
            <param name="type">The type to evaluate.</param>
            <returns>returns true if the argument type is an DateTime or DateTime?</returns>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.GetNullableDateTime(System.String,System.String[])">
            <summary>
            Gets a nullable DateTime object if the string format match with the given formats.
            </summary>
            <param name="value">The datetime string value to convert.</param>
            <param name="formats">The formats to consider for transforming the given string value.</param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.NormalizeValue(System.String)">
            <summary>
            Normalize the argument, so modifies the string value if it has empty chars at the end if the given argument is not null.
            </summary>
            <param name="value">The string to normalize.</param>
            <returns>returns null if the given argument is null or It contains only empty chars.</returns>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.ToPropertyFormat``1(System.String)">
            <summary>
            Converts the given string into the given generic value type.
            </summary>
            <typeparam name="TOutput">The nullable type used to convert.</typeparam>
            <param name="input">The string to convert into the given generic type.</param>
            <returns>return null if the argument contains only empty chars or It is null.</returns>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.ToExcelFormat(System.Object)">
            <summary>
            Converts into string format
            </summary>
            <param name="obj">The object to convert into string format.</param>
            <returns>return null if the argument contains only empty chars or It is null.</returns>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.ToExcelFormat(System.Nullable{System.DateTime})">
            <summary>
            
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:ExcelEntityMapper.XLEntityHelper.ToExcelFormat(System.Nullable{System.DateTime},System.String,System.IFormatProvider)">
            <summary>
            
            </summary>
            <param name="data"></param>
            <param name="format"></param>
            <param name="provider"></param>
            <returns></returns>
        </member>
    </members>
</doc>
